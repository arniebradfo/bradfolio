// -vars.scss


// --------------------------------------------------------------- SIZES
@function fib($i) {
	// $i is the index of the desired number in the fibonacci sequence
	// half values 'n.5' are calculated by adding the previous value with the value to slots behind it
	@if $i == 0 or $i == 0.5 { @return 0; }
	@if $i == 1 or $i == 1.5 or $i == 2 or $i == 2.5 { @return 1px; }
	@if $i == 3 or $i == 3.5 { @return 2px; }
	@if $i == 4 or $i == 4.5 { @return 3px; }
	@if $i == 5    { @return 5px;   }
	@if $i == 5.5  { @return 7px;   } // half
	@if $i == 6    { @return 8px;   }
	@if $i == 6.5  { @return 11px;  } // half
	@if $i == 7    { @return 13px;  }
	@if $i == 7.5  { @return 18px;  } // half
	@if $i == 8    { @return 21px;  }
	@if $i == 8.5  { @return 29px;  } // half
	@if $i == 9    { @return 34px;  }
	@if $i == 9.5  { @return 47px;  } // half
	@if $i == 10   { @return 55px;  }
	@if $i == 10.5 { @return 76px;  } // half
	@if $i == 11   { @return 89px;  }
	@if $i == 11.5 { @return 123px; } // half
	@if $i == 12   { @return 144px; }
	@if $i == 12.5 { @return 199px; } // half
	@if $i == 13   { @return 233px; }
	@if $i == 13.5 { @return 322px; } // half
	@if $i == 14   { @return 377px; }
	@else { @error "fib() only accepts values 1-14, including halfs: n.5s"; }
}
// .fibonacci{ // test
// 	// height: fib(15); // error
// 	height: fib(7.5);
// }


// --------------------------------------------------------------- ANIMATION VARS
$speedOutEASING: cubic-bezier(1,0,1,1);
$speedInEASING:  cubic-bezier(0,0,0,1);

$flyOutEASING: cubic-bezier(.5,0,1,0);
$flyInEASING:  cubic-bezier(0,1,.5,1);

$smoothEASING: cubic-bezier(.5,.2,0,1);

$defaultDURATION: 250ms;
$panelTransitionDURATION: 400ms;

$borderRADIUS: fib(5);

$scrollBarWIDTH: fib(8); // scroll bar elimination

$boxShadowBLUR: 10px;
$boxShadowSPREAD: 1px;
$boxShadowX: 0;
$boxShadowY: 0;
$boxShadowCOLOR: black;
$boxShadowOPACITY: 0.5;
$boxShadow: $boxShadowX $boxShadowY $boxShadowBLUR $boxShadowSPREAD rgba($boxShadowCOLOR, $boxShadowOPACITY);


// --------------------------------------------------------------- UTILITY CLASSES
.checkbox-hack{
	display: none;
	// position: absolute;
	// top:  -9999px;
	// left: -9999px;
}


// --------------------------------------------------------------- POSITION
@mixin position ($position, $args:()) {
	position: $position;
	$length: length($args);
	@if ($length == 1) {
		top:    nth($args, 1);
		right:  nth($args, 1);
		bottom: nth($args, 1);
		left:   nth($args, 1);
	}
	@elseif ($length == 2) {
		top:    nth($args, 1);
		right:  nth($args, 2);
		bottom: nth($args, 1);
		left:   nth($args, 2);
	}
	@elseif ($length == 3) {
		top:    nth($args, 1);
		right:  nth($args, 2);
		bottom: nth($args, 3);
		left:   nth($args, 2);
	}
	@elseif ($length == 4) {
		top:    nth($args, 1);
		right:  nth($args, 2);
		bottom: nth($args, 3);
		left:   nth($args, 4);
	}
	@elseif ($length > 4) {
		top:    nth($args, 1);
		right:  nth($args, 2);
		bottom: nth($args, 3);
		left:   nth($args, 4);
		@warn "Invalid nuber of args.";
	}
}
@mixin absolute ($args:()) {
  @include position(absolute, $args);
}
@mixin fixed ($args:()) {
  @include position(fixed, $args);
}
@mixin relative ($args:()) {
  @include position(relative, $args);
}


// --------------------------------------------------------------- STRIP UNIT
/// Remove the unit of a length
/// @param  {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
/// @link   https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


// --------------------------------------------------------------- TRANSFORM
// adds translateZ to transforms to force Hardware Acceleration.
@mixin transform($transforms){
	// transform: $transforms; // to compare
	transform: $transforms translateZ(0);
	// backface-visibility: hidden; // prevent blinking in webkit
	// perspective: 1000; // might help prevent blinking ??
}

// --------------------------------------------------------------- TRANSITION
// TODO: add transition chaining function
// adds backface visibility to all transitions to prevent "blinky" transitions.
@mixin transition( $properties:(all), $duration:$defaultDURATION, $timing:$smoothEASING, $backface:hidden ) {
	$transitionsLIST:'';
	@each $property in $properties {
		$transitionsLIST: $transitionsLIST +' '+ $property +' '+ $duration +' '+ $timing +' '+ 1ms+', ';
	}
	transition: #{$transitionsLIST} ;
	backface-visibility: $backface;
}
@mixin transitionVis( $visibilityFirst, $properties:(all), $duration:250ms, $timing:'', $backface:hidden ) {
	$transitionsLIST:'';
	@if $visibilityFirst{
		$transitionsLIST: $transitionsLIST+visibility 1ms 0ms+', ';
		@each $property in $properties {
			$transitionsLIST: $transitionsLIST +' '+ $property +' '+ $duration +' '+ $timing +' '+ 1ms+', ';
		}
		transition: #{$transitionsLIST} ;
		visibility: visible;
	}
	@else {
		@each $property in $properties {
			$transitionsLIST: $transitionsLIST+' '+$property+' '+$duration+' '+$timing+' '+0ms+', ';
		}
		$transitionsLIST: $transitionsLIST+' '+visibility 1ms +' '+$duration;
		transition: #{$transitionsLIST} ;
		visibility: hidden;
	}
	backface-visibility: $backface;
}


// --------------------------------------------------------------- CLEARFIX
// $order is a choice between :before and :after - use without the "::" prefix
@mixin clearfix($order:after){
	&:#{$order}{
		content: '';
		display: table;
		clear:   both;
	}
}
// doesn't work on ie6 or ie7
